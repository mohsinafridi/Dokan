

-- Done
         Ocelot is added.
         RabbitMq and Mass Transit is also added.
         pushed to Github.
         Mongo Db added for Book/Notes service.
         Angular
         API Versioning Added for Products - V1 and V2.

 -- TODO::
        
         - Add Graph QL for data fetching.
         - Add swagger on gateway side for all apis.
         - sql server support.
         - Mass transit
         - Docker
         - Cache
        - Swagger Versioning for all apis
        - Add Minimal Api
        - Caching :: Output/Response Caching
        - Docker Compose

         API Gateway Url: 
            https://localhost:5000/{serviceName}


         Microservices:
         1. https://localhost:5001/Order - Order - Mongo Db
         2. https://localhost:5004/Book - Mongo Db -- done.
         3. https://localhost:5005/Customer - Sql Server Db
         4. https://localhost:5006/Product - Sql Server Db
         5. https://localhost:5007/Note  Notes - Sql Server  Removed - PostgreSQL
         6. 


        Angular Application:        
        1. Add Authentication from API Gateway.
        2. Use JWT for Authorization.
        3. Use Reactive forms.  (done)
        4. 


        Messaging:
        Use Rabbit MQ and Mass Transit for Order creation and Completion.

         Rabbit MQ:
          if (ticket != null)
            {
                ticket.BookedOn = DateTime.Now;
                Uri uri = new Uri("rabbitmq://localhost/ticketQueue");
                var endPoint = await _bus.GetSendEndpoint(uri);
                await endPoint.Send(ticket);
                return Ok();
            }