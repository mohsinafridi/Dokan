

-- Done
         Ocelot is added.
         RabbitMq and Mass Transit is also added.
         pushed to Github.
         Mongo Db added for Book service.
         SQL Server Added for Customer Service.
         PostgreSql Added for Notes Service.
         Added swagger on gateway side for all apis.
         -- Angular (Added)

 -- New addition         
         -- add Graph QL for data fetching.
         
         -- sql server support. (done)
         -- Mass transit 
         -- Docker (Deploy all Services on docker)
         
         -- Key Authentication (New)
         -- Write Unit Tests.



         Microservices:
         1. https://localhost:5001/Order - Mongo Db
         2. https://localhost:5004/Book - Mongo Db -- done.
         3. https://localhost:5005/Customer - Sql Server Db
         4. https://localhost:5006/Product - MySql Db
         5. https://localhost:5007/Note  Notes - PostgreSQL
         6. 

        Front end:

        Angular application:
        
        1. Add Authentication from API Gateway.
        2. Use JWT for Authorization.
        3. Use Reactive forms.  (done)
        4. 


        Messaging:
        Use Rabbit MQ and Mass Transit for Order creation and Completion.

         Rabbit MQ:
          if (ticket != null)
            {
                ticket.BookedOn = DateTime.Now;
                Uri uri = new Uri("rabbitmq://localhost/ticketQueue");
                var endPoint = await _bus.GetSendEndpoint(uri);
                await endPoint.Send(ticket);
                return Ok();
            }